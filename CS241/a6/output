start BOF procedures EOF
BOF BOF
procedures procedure procedures
procedure INT ID LPAREN params RPAREN LBRACE dcls statements RETURN expr SEMI RBRACE
INT int
ID max
LPAREN (
params paramlist
paramlist dcl COMMA paramlist
dcl type ID
type INT
INT int
ID a : int
COMMA ,
paramlist dcl
dcl type ID
type INT
INT int
ID b : int
RPAREN )
LBRACE {
dcls dcls dcl BECOMES NUM SEMI
dcls .EMPTY
dcl type ID
type INT
INT int
ID answer : int
BECOMES =
NUM 0 : int
SEMI ;
statements statements statement
statements .EMPTY
statement IF LPAREN test RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
IF if
LPAREN (
test expr GT expr
expr term : int
term factor : int
factor ID : int
ID a : int
GT >
expr term : int
term factor : int
factor ID : int
ID b : int
RPAREN )
LBRACE {
statements statements statement
statements .EMPTY
statement lvalue BECOMES expr SEMI
lvalue ID : int
ID answer : int
BECOMES =
expr term : int
term factor : int
factor ID : int
ID a : int
SEMI ;
RBRACE }
ELSE else
LBRACE {
statements statements statement
statements .EMPTY
statement lvalue BECOMES expr SEMI
lvalue ID : int
ID answer : int
BECOMES =
expr term
term factor
factor ID LPAREN arglist RPAREN
ID max
LPAREN (
arglist expr COMMA arglist
expr term : int
term factor : int
factor ID : int
ID b : int
COMMA ,
arglist expr
expr term : int
term factor : int
factor ID : int
ID b : int
RPAREN )
SEMI ;
RBRACE }
RETURN return
expr term
term factor
factor ID
ID answer
SEMI ;
RBRACE }
procedures main
main INT WAIN LPAREN dcl COMMA dcl RPAREN LBRACE dcls statements RETURN expr SEMI RBRACE
INT int
WAIN wain
LPAREN (
dcl type ID
type INT
INT int
ID a
COMMA ,
dcl type ID
type INT
INT int
ID b
RPAREN )
LBRACE {
dcls dcls dcl BECOMES NUM SEMI
dcls dcls dcl BECOMES NUM SEMI
dcls .EMPTY
dcl type ID
type INT
INT int
ID counter
BECOMES =
NUM 0
SEMI ;
dcl type ID
type INT
INT int
ID product
BECOMES =
NUM 0
SEMI ;
statements statements statement
statements statements statement
statements statements statement
statements .EMPTY
statement lvalue BECOMES expr SEMI
lvalue ID
ID product
BECOMES =
expr expr MINUS term
expr term
term factor
factor NUM
NUM 0
MINUS -
term factor
factor NUM
NUM 1
SEMI ;
statement lvalue BECOMES expr SEMI
lvalue ID
ID counter
BECOMES =
expr term
term factor
factor ID LPAREN arglist RPAREN
ID max
LPAREN (
arglist expr COMMA arglist
expr term
term factor
factor ID
ID b
COMMA ,
arglist expr COMMA arglist
expr term
term factor
factor ID
ID b
COMMA ,
arglist expr
expr term
term factor
factor ID
ID b
RPAREN )
SEMI ;
statement IF LPAREN test RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
IF if
LPAREN (
test expr GE expr
expr term
term factor
factor ID
ID a
GE >=
expr term
term factor
factor NUM
NUM 0
RPAREN )
LBRACE {
statements statements statement
statements .EMPTY
statement IF LPAREN test RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
IF if
LPAREN (
test expr GE expr
expr term
term factor
factor ID
ID b
GE >=
expr term
term factor
factor NUM
NUM 0
RPAREN )
LBRACE {
statements statements statement
statements .EMPTY
statement IF LPAREN test RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
IF if
LPAREN (
test expr LT expr
expr term
term factor
factor ID
ID a
LT <
expr term
term factor
factor NUM
NUM 10
RPAREN )
LBRACE {
statements statements statement
statements .EMPTY
statement IF LPAREN test RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
IF if
LPAREN (
test expr LT expr
expr term
term factor
factor ID
ID b
LT <
expr term
term factor
factor NUM
NUM 10
RPAREN )
LBRACE {
statements statements statement
statements statements statement
statements statements statement
statements .EMPTY
statement lvalue BECOMES expr SEMI
lvalue ID
ID product
BECOMES =
expr term
term factor
factor NUM
NUM 1
SEMI ;
statement lvalue BECOMES expr SEMI
lvalue ID
ID counter
BECOMES =
expr term
term factor
factor NUM
NUM 0
SEMI ;
statement WHILE LPAREN test RPAREN LBRACE statements RBRACE
WHILE while
LPAREN (
test expr LT expr
expr term
term factor
factor ID
ID counter
LT <
expr term
term factor
factor ID
ID b
RPAREN )
LBRACE {
statements statements statement
statements statements statement
statements .EMPTY
statement lvalue BECOMES expr SEMI
lvalue ID
ID product
BECOMES =
expr term
term term STAR factor
term factor
factor ID
ID product
STAR *
factor ID
ID a
SEMI ;
statement lvalue BECOMES expr SEMI
lvalue ID
ID counter
BECOMES =
expr expr PLUS term
expr term
term factor
factor ID
ID counter
PLUS +
term factor
factor NUM
NUM 1
SEMI ;
RBRACE }
RBRACE }
ELSE else
LBRACE {
statements .EMPTY
RBRACE }
RBRACE }
ELSE else
LBRACE {
statements .EMPTY
RBRACE }
RBRACE }
ELSE else
LBRACE {
statements .EMPTY
RBRACE }
RBRACE }
ELSE else
LBRACE {
statements .EMPTY
RBRACE }
RETURN return
expr term
term factor
factor ID
ID product
SEMI ;
RBRACE }
EOF EOF
